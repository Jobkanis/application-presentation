<?xml version="1.0" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.1">
  <web>Presentation</web>
  <name>PresentationSlideGenerator</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <creationDate>1406493057000</creationDate>
  <parent>Presentation.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <date>1407139025000</date>
  <contentUpdateDate>1407139025000</contentUpdateDate>
  <version>1.1</version>
  <title/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.0</syntaxId>
  <hidden>false</hidden>
  <content>{{groovy}}
import org.xwiki.rendering.block.match.*
import org.xwiki.rendering.block.*
import org.xwiki.rendering.transformation.*
import org.xwiki.rendering.syntax.*
import org.xwiki.rendering.listener.*
import com.xpn.xwiki.web.*

// Algorithm:
// - find all Section Blocks at all levels
// - For each Section Block remove nested Section blocks so that each slides maps only to one section
def presentationDocumentReference = xcontext.get("presentationDocument")
def xdom = xwiki.getDocument(presentationDocumentReference).getDocument().getXDOM()
def newxdom = xdom.clone();
def txContext = new TransformationContext(newxdom, Syntax.XWIKI_2_0)
Utils.getComponent(TransformationManager.class).performTransformations(newxdom, txContext)
def blocks = newxdom.getBlocks(new ClassBlockMatcher(SectionBlock.class), Block.Axes.DESCENDANT);

def tpn = 1;
blocks.each() { sectionBlock -&gt;
  // Remove nested SectionBlocks.
  sectionBlock.getBlocks(new ClassBlockMatcher(SectionBlock.class), Block.Axes.CHILD).each() { nestedSectionBlock -&gt;
    nestedSectionBlock.getParent().removeBlock(nestedSectionBlock)
  }
  // Discard empty section block. This happens for example when a document starts at section 3, the rendering module will create 2 empty sections, one for each missing level.
  if (sectionBlock.getChildren().size() &gt; 0) {
    tpn++;
  }
}

blocks.each() { sectionBlock -&gt;
  // Remove nested SectionBlocks.
  sectionBlock.getBlocks(new ClassBlockMatcher(SectionBlock.class), Block.Axes.CHILD).each() { nestedSectionBlock -&gt;
    nestedSectionBlock.getParent().removeBlock(nestedSectionBlock)
  }
  // Discard empty section block. This happens for example when a document starts at section 3, the rendering module will create 2 empty sections, one for each missing level.
  if (sectionBlock.getChildren().size() &gt; 0) {
    print '{{html clean="false"}}&lt;article tpn="' + tpn + '"' 
    def sectionClass = sectionBlock.headerBlock.getParameter('class')
    if (sectionClass) print " class='${sectionClass}'"
    println '&gt;'
    // Render the content in XHTML, in the context of the presentation document (we wrap the content to render in a metadata block with a source reference)
    def wrappedSectionBlock = new MetaDataBlock(Arrays.asList(sectionBlock), new MetaData(Collections.singletonMap(MetaData.SOURCE, presentationDocumentReference)))
    print "${services.rendering.render(wrappedSectionBlock, "xhtml/1.0")}"
    println "&lt;/article&gt;{{/html}}"
    println ""
  }
}
return ""
 {{/groovy}}
</content>
</xwikidoc>
